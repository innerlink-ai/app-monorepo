services:
  backend:
    build:
      context: app/backend/
      dockerfile: Dockerfile.cpu
    ports:
      - "8000:8000"
    environment:
      #DATABASE_URL: "postgresql://admin:SuperSecurePassword@postgres:5432/postgres"
      #INITIAL_USER_EMAIL: matthewgorbett@gmail.com
      #EMAIL_DOMAIN_RESTRICTION: gmail.com
      DOMAIN: localhost:5173
      LLM: gpt2 #try whatever you want! phi1.5 is "microsoft/phi-1_5" on huggingface
      ADMIN_DATABASE_URL: "postgresql://admin:SuperSecurePassword@host.docker.internal:5432/admin_db"
      CHAT_DATABASE_URL: "postgresql://admin:SuperSecurePassword@host.docker.internal:5432/admin_db"
      #COLLECTIONS_DATABASE_URL: "postgresql://admin:SuperSecurePassword@host.docker.internal:5432/collections_db"
      HF_TOKEN: "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"
      REDIS_URL: "redis://redis:6379/0"
      DATA_DIR: '$HOME/data'
      LOG_LEVEL: DEBUG
      EMBEDDING_DIMENSION: "768"
      EMBEDDING_MODEL_NAME: "intfloat/multilingual-e5-base"
      EMBEDDING_CACHE_SIZE: "1"
      VECTORDB_K: "2"
    
    entrypoint: ["./scripts/start-script.sh", "postgres", "5432", "--", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
    networks:
      - app_network  # ✅ Attach to a named network

  postgres:
    #image: postgres:15
    image: ankane/pgvector:latest
    restart: always
    container_name: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: SuperSecurePassword
      POSTGRES_DB: postgres
    healthcheck:
      #test: ["CMD-SHELL", "pg_isready -U admin -d collections_db"]
      test: ["CMD-SHELL", "pg_isready -U admin -d postgres"]
      interval: 5s
      timeout: 3s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./app/db/ddl/init.sql:/docker-entrypoint-initdb.d/init.sql
      - /Users/matthewgorbett/postgres-certs:/var/lib/postgresql/ssl/
    networks:
      - app_network  # ✅ Attach to the same network

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: pgadminpassword
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - app_network  # ✅ Attach to the same network
  frontend:
    build:
      context: app/frontend/
      dockerfile: Dockerfile
      args:
        VITE_API_URL: "localhost:8000"

    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - app_network
    volumes:
      - ./app/frontend:/app
      - /app/node_modules



  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app_network  # Add redis to the network

  embedding-worker:
    build:
      context: app/embedding-worker
      dockerfile: Dockerfile.embedding_worker
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://admin:SuperSecurePassword@host.docker.internal:5432/collections_db
      - DATA_DIR=$HOME/data
      - EMBEDDING_DIMENSION=768
      - EMBEDDING_MODEL_NAME=intfloat/multilingual-e5-base
      - USE_CPU='false'
    volumes:
      - $HOME/data:$HOME/data
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - app_network

volumes:
  postgres_data:
  redis-data:

networks:
  app_network:  # ✅ Define a shared network
